git config --global user.name "Your Name"
git config --global user.email "email@example.com"
git init
git add File
git add -A
git commit -m "sss"
git checkout -b dev (创建分支并切换)
git branch -d dev(删除分支)
git branch (查看分支)
git checkout master (切换分支)
git status (查看当前分支状态)
git log(查看日志)
git merge --no-ff -m "sss" dev(合并分支并提交，禁用Fast forward,保留了分支历史)
git log --graph --pretty=oneline --abbrev-commit (一条线上查看历史图)
git stash(保存当前分支到别的地方)
git stash list
git stash apply(恢复stash内容，但是stash不删除，需要git stash drop来释放stash)
git stash drop(释放stash)
git stash pop(恢复stash的同时释放stash)
git stash apply stash@{0}(多个stash,恢复指定stash)
git branch -D dev(未合并分支的删除)

git remote add origin git@github.com:wangcuckoo/learngit.git（把本地仓库链接到GitHub仓库）
git remote(查看远程库信息)
git remote -v
git remote rm origin(移除关联的远程仓库)
git remote add <origin> git@gitee.com:liaoxuefeng/learngit.git(关联远程库)
git clone git@github.com:wangcuckoo/buguTech.git
git checkout -b dev origin/dev(创建关联远程地址的分支并切换)
git branch --set-upstream-to=origin/dev dev （让存在的分支dev和远程库分支dev关联）
git push origin master(推送分支到远程库)
git push -u origin master（把本地库的所有内容推送到远程库上）
git pull(拉取当前版本的最新更新)
git rebase(可以把本地未push的分叉提交历史整理成直线)

git tag v1.0(在最新的地方打标签)
git tag v0.9 f52c633（在指定提交打标签）
git tag -a v0.1 -m "version 0.1 released" 1094adb（在指定提交打标签并且说明）
git show v1.0
git tag -d v1.0(删除本地标签)
git push origin <tagname>（推送标签到远程库）
git push origin --tags（推送所有标签到远程库）
git tag -d v1.0      git push origin :refs/tags/v1.0（两步删除远程标签）

git config --global alias.co checkout(修改别名)

管理公钥Gitosis
管理控制权限Gitolite


.gitignore文件
git add -f <filename> (强制添加到git)
git check-ignore -v <filename> (Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则)

码云
git remote add origin git@gitee.com:dashangwangle/buguTech.git

ssh-keygen -t rsa -C "youremail@example.com"（生成SSH Key,一个非公开的，一个公开的，公开的需要在你的GitHub使用）